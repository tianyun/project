package jm;

import java.util.Arrays;

public class Test {
	public static void main(String[] args) throws Exception {
		byte[] data = new byte[] { (byte) 0x8e, (byte) 0x0c, (byte) 0x01, (byte) 0x01, (byte) 0x01, (byte) 0x01,
				(byte) 0x01, (byte) 0x01, (byte) 0x01, (byte) 0x01, (byte) 0x01, (byte) 0x01, (byte) 0x01, (byte) 0x01,
				(byte) 0x8f, (byte) 0x01, (byte) 0x05, (byte) 0x90, (byte) 0x40, (byte) 0xeb, (byte) 0xc1, (byte) 0xfc,
				(byte) 0xee, (byte) 0x8c, (byte) 0x30, (byte) 0x09, (byte) 0xe5, (byte) 0xc2, (byte) 0xcd, (byte) 0x56,
				(byte) 0xb1, (byte) 0x45, (byte) 0xa0, (byte) 0x0f, (byte) 0x98, (byte) 0x6f, (byte) 0x4e, (byte) 0x9a,
				(byte) 0x8a, (byte) 0xd9, (byte) 0xe7, (byte) 0x28, (byte) 0x5f, (byte) 0xee, (byte) 0xe0, (byte) 0x57,
				(byte) 0x6d, (byte) 0xf1, (byte) 0x11, (byte) 0x09, (byte) 0x34, (byte) 0x31, (byte) 0x3e, (byte) 0x09,
				(byte) 0x9d, (byte) 0x36, (byte) 0x04, (byte) 0x43, (byte) 0x96, (byte) 0x21, (byte) 0x12, (byte) 0x01,
				(byte) 0x99, (byte) 0x56, (byte) 0x54, (byte) 0xc9, (byte) 0x79, (byte) 0xf0, (byte) 0xb3, (byte) 0xc7,
				(byte) 0xeb, (byte) 0xee, (byte) 0xf0, (byte) 0xfd, (byte) 0x1b, (byte) 0xdd, (byte) 0x08, (byte) 0x11,
				(byte) 0xf5, (byte) 0xe1, (byte) 0x44, (byte) 0x18, (byte) 0xee };

		byte[] priByte = new byte[] { (byte) 0x30, (byte) 0x41, (byte) 0x02, (byte) 0x01, (byte) 0x00, (byte) 0x30,
				(byte) 0x13, (byte) 0x06, (byte) 0x07, (byte) 0x2a, (byte) 0x86, (byte) 0x48, (byte) 0xce, (byte) 0x3d,
				(byte) 0x02, (byte) 0x01, (byte) 0x06, (byte) 0x08, (byte) 0x2a, (byte) 0x86, (byte) 0x48, (byte) 0xce,
				(byte) 0x3d, (byte) 0x03, (byte) 0x01, (byte) 0x07, (byte) 0x04, (byte) 0x27, (byte) 0x30, (byte) 0x25,
				(byte) 0x02, (byte) 0x01, (byte) 0x01, (byte) 0x04, (byte) 0x20, (byte) 0xD8, (byte) 0x9A, (byte) 0x9E,
				(byte) 0xD9, (byte) 0xD4, (byte) 0x5A, (byte) 0xFD, (byte) 0xA1, (byte) 0xE5, (byte) 0xA4, (byte) 0x29,
				(byte) 0x73, (byte) 0x2B, (byte) 0x18, (byte) 0xE5, (byte) 0x51, (byte) 0xC4, (byte) 0xB0, (byte) 0x77,
				(byte) 0xEF, (byte) 0xA3, (byte) 0x5E, (byte) 0xB3, (byte) 0x55, (byte) 0x63, (byte) 0x73, (byte) 0xBC,
				(byte) 0x13, (byte) 0xBE, (byte) 0xE2, (byte) 0x5C, (byte) 0x2C };

		byte[] pubByte = new byte[] { (byte) 0x41, (byte) 0xA0, (byte) 0x02, (byte) 0x0C, (byte) 0x65, (byte) 0xCA,
				(byte) 0x1B, (byte) 0xD0, (byte) 0xB4, (byte) 0x4B, (byte) 0x0B, (byte) 0xC9, (byte) 0xD3, (byte) 0x92,
				(byte) 0xE2, (byte) 0x14, (byte) 0xDB, (byte) 0x7A, (byte) 0x97, (byte) 0xC3, (byte) 0x22, (byte) 0xEA,
				(byte) 0xC7, (byte) 0xD7, (byte) 0xEA, (byte) 0x05, (byte) 0x77, (byte) 0xFB, (byte) 0x74, (byte) 0x4C,
				(byte) 0xC0, (byte) 0x86, (byte) 0x8F, (byte) 0xA6, (byte) 0xF9, (byte) 0x21, (byte) 0x72, (byte) 0x38,
				(byte) 0x92, (byte) 0xF3, (byte) 0x69, (byte) 0xA9, (byte) 0xAA, (byte) 0x82, (byte) 0xE0, (byte) 0xEC,
				(byte) 0x69, (byte) 0x77, (byte) 0x59, (byte) 0xA8, (byte) 0x6C, (byte) 0x5E, (byte) 0x7D, (byte) 0x74,
				(byte) 0x96, (byte) 0x1D, (byte) 0xB9, (byte) 0xCD, (byte) 0x9A, (byte) 0x3D, (byte) 0xC0, (byte) 0x2F,
				(byte) 0x86, (byte) 0x4A };
		pubByte = asnEncodeRawECPublicKeyBytes(pubByte);

		byte[] sign = new byte[] { (byte) 0x30, (byte) 0x45, (byte) 0x02, (byte) 0x20, (byte) 0x48, (byte) 0x13,
				(byte) 0xdf, (byte) 0xd6, (byte) 0xd6, (byte) 0xcc, (byte) 0x43, (byte) 0xd1, (byte) 0x85, (byte) 0xd8,
				(byte) 0x84, (byte) 0xa8, (byte) 0xb1, (byte) 0x09, (byte) 0xf0, (byte) 0xfa, (byte) 0xe2, (byte) 0x57,
				(byte) 0x32, (byte) 0x4e, (byte) 0x15, (byte) 0x5b, (byte) 0xc6, (byte) 0xa7, (byte) 0xc7, (byte) 0x59,
				(byte) 0x88, (byte) 0x19, (byte) 0x41, (byte) 0xd7, (byte) 0x71, (byte) 0xac, (byte) 0x02, (byte) 0x21,
				(byte) 0x00, (byte) 0xb0, (byte) 0x37, (byte) 0xe8, (byte) 0xbd, (byte) 0x14, (byte) 0x40, (byte) 0xb4,
				(byte) 0xe3, (byte) 0xce, (byte) 0x08, (byte) 0xce, (byte) 0xa9, (byte) 0x59, (byte) 0xdf, (byte) 0x80,
				(byte) 0x33, (byte) 0x6b, (byte) 0x26, (byte) 0x99, (byte) 0x08, (byte) 0x0d, (byte) 0xa1, (byte) 0x8c,
				(byte) 0xf7, (byte) 0xe1, (byte) 0x55, (byte) 0x7c, (byte) 0xbd, (byte) 0x55, (byte) 0xe7, (byte) 0xab,
				(byte) 0xef };
		System.out.println("«©√˚================");
		byte[] result = SignatureEcdsaUtils.sign(data, priByte, "SHA256withECDSA");
		System.out.println("result length:"+result.length);
		System.out.println(Arrays.toString(result));
		System.out.println("sign length:"+sign.length);

		System.out.println(Arrays.toString(sign));
		System.out.println();
		System.out.println("—È«©1================");
		System.out.println(SignatureEcdsaUtils.verify(data, pubByte, result, "SHA256withECDSA"));
		System.out.println("—È«©2================");
		System.out.println(SignatureEcdsaUtils.verify(data, pubByte, sign, "SHA256withECDSA"));

	}

	public static byte[] asnEncodeRawECPublicKeyBytes(byte[] rawPublicKeyBytes) throws Exception {

		byte[] pubKeyASNHeader = null;

		if (rawPublicKeyBytes.length == 64) {
			pubKeyASNHeader = new byte[] { 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2A, (byte) 0x86, 0x48, (byte) 0xCE,
					0x3D, 0x02, 0x01, 0x06, 0x08, 0x2A, (byte) 0x86, 0x48, (byte) 0xCE, 0x3D, 0x03, 0x01, 0x07, 0x03,
					0x42, 0x00, 0x04 };
		} else if (rawPublicKeyBytes.length == 48) {
			pubKeyASNHeader = new byte[] { 0x30, 0x49, 0x30, 0x13, 0x06, 0x07, 0x2a, (byte) 0x86, 0x48, (byte) 0xce,
					0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, (byte) 0x86, 0x48, (byte) 0xce, 0x3d, 0x03, 0x01, 0x01, 0x03,
					0x32, 0x00, 0x04 };
		} else if (rawPublicKeyBytes.length == 40) {
			pubKeyASNHeader = new byte[] { 0x30, 0x3e, 0x30, 0x10, 0x06, 0x07, 0x2a, (byte) 0x86, 0x48, (byte) 0xce,
					0x3d, 0x02, 0x01, 0x06, 0x05, 0x2b, (byte) 0x81, 0x04, 0x00, 0x08, 0x03, 0x2a, 0x00, 0x04 };

		} else {
			throw new Exception(
					"Currently only asn encoding of 64 byte / 48 byte / 40 byte raw public keys is supported.");
		}

		byte[] pubKeyASNEncoded = new byte[rawPublicKeyBytes.length + pubKeyASNHeader.length];
		System.arraycopy(pubKeyASNHeader, 0, pubKeyASNEncoded, 0, pubKeyASNHeader.length);
		System.arraycopy(rawPublicKeyBytes, 0, pubKeyASNEncoded, pubKeyASNHeader.length, rawPublicKeyBytes.length);

		return pubKeyASNEncoded;
	}
}
